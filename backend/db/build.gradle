plugins {
    id 'java'
    id 'idea'
    id "net.ltgt.apt" version "0.21"
    id "nu.studer.jooq" version "3.0.3"
}

group 'ru.githarbor'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    compile 'org.jooq:jooq'
    compile 'org.postgresql:postgresql:42.2.5'
    jooqRuntime 'org.postgresql:postgresql:42.2.5'

    compile 'com.google.code.gson:gson:2.8.5'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jooq {
    harbor(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/githarbor'
            user = 'githarbor'
            password = '1'
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'

            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'

                customTypes {
                    customType {
                        name = "JsonElement"
                        type = "com.google.gson.JsonElement"
                        binding ='ru.githarbor.backend.db.PostgresJSONGsonBinding'
                    }
                }

                forcedTypes {
                    forcedType {
                        userType = 'com.google.gson.JsonElement'
                        binding ='ru.githarbor.backend.db.PostgresJSONGsonBinding'
                        expression = '.*'
                        types = 'JSONB?'
                    }
                }
            }

            target {
                packageName = 'ru.githarbor.backend.db'
            }
        }
    }
}

tasks.generateHarborJooqSchemaSource.with {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
    execResultHandler = { ExecResult r ->
        if (r.exitValue != 0) {
            throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
        }
    }
}
